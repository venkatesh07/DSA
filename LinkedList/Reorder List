You are given the head of a singly linked-list. The list can be represented as:

L0 → L1 → … → Ln - 1 → Ln
Reorder the list to be on the following form:

L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → …
You may not modify the values in the list's nodes. Only nodes themselves may be changed.

Input: head = [1,2,3,4]
Output: [1,4,2,3]

Code:
class Solution {
    public void reorderList(ListNode head) {

        if(head == null || head.next == null) return;

        ListNode fast = head, slow = head;

        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }

        ListNode second = reverse(slow.next);
        slow.next = null; //break the list

        ListNode first = head;

        while(second != null){
            ListNode temp1 = first.next; //2
            ListNode temp2 = second.next; //4

            first.next = second; // 1->5
            second.next = temp1; // 5->2

            //first = 1, second = 5
            //temp1 = 2, temp2 = 4

            first = temp1;
            second = temp2;

        }
        
    }
    private ListNode reverse(ListNode head){
        ListNode prev = null, curr = head;
        while(curr != null){
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }



Time and space Complexity:
Time: O(n) → one pass to find middle + one to reverse + one to merge
Space: O(1)
}
