Given the root of a binary tree, return the length of the diameter of the tree.
The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.
The length of a path between two nodes is represented by the number of edges between them.
Example 1:
Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].

Code:
class Solution {
    int diameter = 0;
    public int diameterOfBinaryTree(TreeNode root) {
        diameterOfBinaryTreehelper(root);
        return diameter;
    }
    private int diameterOfBinaryTreehelper(TreeNode root){
        if(root == null) return 0;

        int lh = diameterOfBinaryTreehelper(root.left);
        int rh = diameterOfBinaryTreehelper(root.right);
        diameter = Math.max(lh+rh, diameter);
        return Math.max(lh,rh) + 1;

    }
}

Time Complexity: O(N)
Each node is visited exactly once in the recursive helper method.
For every node, we do O(1) work — compute lh, rh, update diameter, and return height.
Hence, total = O(N), where N = number of nodes.

Space Complexity: O(H)
H = height of the tree.
This comes from the recursion stack — in the worst case (skewed tree), recursion goes as deep as the tree height.
So:
Best case (balanced tree): O(log N)
Worst case (skewed tree): O(N)
✅ Final Answer:
Time: O(N)
Space: O(H) ⟶ O(log N) on average, O(N) in worst case
