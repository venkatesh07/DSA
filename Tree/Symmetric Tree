Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).
Example 1:
Input: root = [1,2,2,3,4,4,3]
Output: true

Code:
class Solution {
    public boolean isSymmetric(TreeNode root) {

        return root == null || isSymmetrichelper(root.left, root.right);
        
    }
    private boolean isSymmetrichelper(TreeNode left, TreeNode right){
        if(right == null || left == null) return left == right;
        
        if(right.val != left.val) return false;

        return isSymmetrichelper(left.left, right.right) && isSymmetrichelper(left.right, right.left);

    }
}

Time and space complexicity
O(N) and O(H) respectively
