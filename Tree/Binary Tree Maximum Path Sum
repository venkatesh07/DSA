A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.
The path sum of a path is the sum of the node's values in the path.
Given the root of a binary tree, return the maximum path sum of any non-empty path.
Example 1:
Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.

Code:
class Solution {
    int maxsum = Integer.MIN_VALUE;
    public int maxPathSum(TreeNode root) {
        helper(root);
        return maxsum;
    }
    private int helper(TreeNode root){
        if(root == null) return 0;
        
        int lh = Math.max(helper(root.left), 0);
        int rh = Math.max(helper(root.right), 0);

        int currentsum = root.val + (lh+rh);
        maxsum = Math.max(maxsum, currentsum);

        return root.val + Math.max(lh, rh);
    }
}

Time Complexity: O(N)
Each node is visited once.
Constant work per node (simple max and addition).
So total time = O(N).

Space Complexity: O(H)
Only recursion stack space is used.
H = height of the tree.
✅ Worst case (skewed tree): O(N)
✅ Best case (balanced tree): O(log N)
