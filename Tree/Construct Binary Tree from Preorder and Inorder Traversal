Given two integer arrays preorder and inorder where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.
Example 1:
Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]

Code:
class Solution {
    private int preorderindex = 0;
    private int[] preorder;
    private int[] inorder;
    private HashMap<Integer, Integer> map;

    public TreeNode buildTree(int[] preorder, int[] inorder) {
          this.preorder = preorder;
          this.inorder = inorder;
          map = new HashMap<>();

          for(int i=0;i<inorder.length;i++){
            map.put(inorder[i], i);
          }
        return build(0, inorder.length-1);
    }
    private TreeNode build(int start, int end){
        if(start > end) return null;
        
        int rootVal = preorder[preorderindex++];
        TreeNode root = new TreeNode(rootVal);

        int indexVal = map.get(rootVal);

        root.left = build(start, indexVal-1);
        root.right = build(indexVal+1, end);

        return root;

    }
}

Time Complexicity - O(N) + O(N) - main and helper function
Space complexicty - O(H) + O(N) - stack space and map
