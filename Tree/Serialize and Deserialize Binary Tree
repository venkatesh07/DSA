Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.
Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.
Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.
Example 1:
Input: root = [1,2,3,null,null,4,5]
Output: [1,2,3,null,null,4,5]

Code:
public class Codec {
    public String serialize(TreeNode root) {
        if(root == null) return "";
        Queue<TreeNode> q = new LinkedList<>();
        StringBuilder ans = new StringBuilder();

        q.add(root);
        while(!q.isEmpty()){
            TreeNode node = q.poll();
            if(node == null){
                ans.append("# ");
                continue;
            }
            ans.append(node.val + " ");
            q.add(node.left);
            q.add(node.right);
        }
        return ans.toString();
    }

    public TreeNode deserialize(String data) {
        if(data == "") return null;
        Queue<TreeNode> q = new LinkedList<>();
        String[] values = data.split(" ");
        TreeNode root = new TreeNode(Integer.parseInt(values[0]));
        q.add(root);
        for(int i=1;i<values.length;i++){
            TreeNode parent = q.poll();
            if(!values[i].equals("#")){
                TreeNode left = new TreeNode(Integer.parseInt(values[i]));
                parent.left = left;
                q.add(left);
            }
             if(!values[++i].equals("#")){
                TreeNode right = new TreeNode(Integer.parseInt(values[i]));
                parent.right = right;
                q.add(right);
            }
        }
        return root;
    }
}


Serialization
Time Complexity → O(N)
Each node (including null placeholders) is processed once.
Enqueue + dequeue + string append are O(1) per node.

Space Complexity → O(N) (Queue) + O(N) (StringBuilder)
Queue stores nodes for BFS traversal.
StringBuilder stores the final serialized string.
✅ Total: O(2N) → simplified to O(N)

Deserialization
Time Complexity → O(N)
We traverse each value from the serialized string exactly once.
For each, we create at most one node.

Space Complexity → O(N) (Queue) + O(N) (Array)
Queue for BFS reconstruction.
The split() string array for all values.
✅ Total: O(2N) → simplified to O(N)
