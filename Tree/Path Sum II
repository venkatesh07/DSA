Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.
A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.
Example 1:
Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: [[5,4,11,2],[5,8,4,5]]
Explanation: There are two paths whose sum equals targetSum:
5 + 4 + 11 + 2 = 22
5 + 8 + 4 + 5 = 22

Code:
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {

        List<List<Integer>> res = new LinkedList<>();
        dfs(root, targetSum, new LinkedList<>(), res);
        return res;    
    }
    private void dfs(TreeNode node, int targetSum, LinkedList<Integer> li, List<List<Integer>> res){
        if(node == null) return;


        li.add(node.val);

        if(node.left == null && node.right == null && node.val == targetSum){
            res.add(new LinkedList<>(li));
        }else{
            dfs(node.left, targetSum-node.val, li, res);
            dfs(node.right, targetSum-node.val, li, res);

        }
        li.remove(li.size()-1);
    }
}

Complexity:
Time: O(N) (each node visited once)
Space: O(H) (recursion + path)
