You are given an m x n grid where each cell can have one of three values:
0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.
Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

Example 1:
Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

Code:
class Solution {
    public int orangesRotting(int[][] grid) {

        int m = grid.length;
        int n = grid[0].length;
        int fresh = 0;

        Queue<int[]> q = new LinkedList<>();

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j] == 2){
                   q.add(new int[]{i, j});
                }else if(grid[i][j] == 1){
                    fresh++;
                }
            }
        }

        if(fresh == 0) return 0;
        int min = 0;
        int[][] directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

        while(!q.isEmpty()){
            int Size = q.size();
            boolean rotten = false;

            for(int i=0;i<Size;i++){
                int[] curr = q.poll();
                int x = curr[0];
                int y = curr[1];
                for(int[] direction:directions){
                    int newX = x + direction[0];
                    int newY = y + direction[1];
                    if(newX >= 0 && newX < m && newY >=0 && newY < n && grid[newX][newY] == 1){
                        grid[newX][newY] = 2;
                        rotten = true;
                        fresh--;
                        q.add(new int[]{newX, newY});
                    }

                }
            }
            if(rotten) min++;

        }
        return fresh == 0 ? min:-1;
    }
}

Time	O(m × n)	Each cell processed once
Space	O(m × n)	BFS queue in worst case
Constants (O(4), etc.)	Ignored	Constant time
