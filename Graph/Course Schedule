There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.
For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

Example 1:
Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.

Code:
class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {

        int V = numCourses;

        ArrayList<Integer> list = new ArrayList<>();

        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();

        for(int i=0;i<V;i++){
            adj.add(new ArrayList<>());
        }

        int n = prerequisites.length;

        for(int i=0;i<n;i++){
            adj.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }

        int[] indegree = new int[V];

        for(int i=0;i<V;i++){
            for(int it:adj.get(i)){
                indegree[it]++;
            }
        }

        Queue<Integer> q = new LinkedList<>();

        for(int i=0;i<V;i++){
           if(indegree[i] == 0){
            q.add(i);
           }
        }

        while(!q.isEmpty()){
            int curr = q.poll();
            list.add(curr);
            for(int it:adj.get(curr)){
                indegree[it]--;
                if(indegree[it] == 0){
                    q.add(it);
                }
            }
        }
        if(V == list.size()){
            return true;
        }  
        else{
            return false;
        }
    }
}

Time Complexity → O(V + E)
Explanation:
Building adjacency list → O(E)
Computing indegree → O(E)
BFS traversal (each node + each edge once) → O(V + E)

Space Complexity → O(V + E)
Explanation:
Adjacency list stores all edges → O(E)
Indegree array → O(V)
Queue → up to O(V) in worst case
List to store topo order → O(V)
