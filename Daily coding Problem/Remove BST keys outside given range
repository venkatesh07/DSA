class Solution {
    public void dfs(Node root, int l, int r, List<Integer> res){
        if(root == null){
            return;
        }
        
        if(root.data >= l && root.data <= r){
            res.add(root.data);
        }
        
        if(root.data > l){
            dfs(root.left, l, r, res);
        }
        
        if(root.data < r){
            dfs(root.right, l, r, res);
        }
    }
    
    public Node createBST(Node root, int val){
        if(root == null){
            root = new Node(val);
            return root;
        }
        
        if(root.data > val){
            root.left = createBST(root.left, val);
        }
        
        if(root.data < val){
            root.right = createBST(root.right, val);
        }
        
        return root;
    }
    
    Node removekeys(Node root, int l, int r) {
        // code here
        List<Integer> res = new ArrayList<>();
        dfs(root, l, r, res);
        
        root = null;
        
        for(int i=0; i<res.size(); i++){
            root = createBST(root, res.get(i));
        }
        
        return root;
    }
}
