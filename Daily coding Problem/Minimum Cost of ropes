Given an array, arr[] of rope lengths, connect all ropes into a single rope with the minimum total cost. The cost to connect two ropes is the sum of their lengths. 
Examples:
Input: arr[] = [4, 3, 2, 6]
Output: 29
Explanation: First connect 2 and 3 to get [4, 5, 6] with a cost of 5, then connect 4 and 5 to get [9, 6] with a cost of 9, and finally connect 9 and 6 to get one rope with a cost of 15, giving a total minimum cost of 29. Any other order, 
such as connecting 4 and 6 first, results in a higher total cost of 38.

Code:
class Solution {
    public static int minCost(int[] arr) {
        // code here
        int minTotalCost = 0;
        int n = arr.length;
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        for(int i : arr)
        {
            minHeap.add(i);
        }
        while(minHeap.size() > 1)
        {
            int total = 0;
            int rope1 = minHeap.poll();
            int rope2 = minHeap.poll();
            total = rope1 + rope2;
            minTotalCost += total;
            minHeap.add(total);
        }
        return minTotalCost;
    }
}
